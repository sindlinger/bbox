    def interactive_roi_adjustment(self, image, doc_type=None, template_name=None):
        """
        Permite ajuste interativo das ROIs com alternância entre mover e redimensionar.
        Integrado com o sistema de templates.
        """
        # Selecionar ou criar template
        doc_type, template_name = self.select_template(doc_type, template_name)
        
        window_name = f"ROI Adjustment - {doc_type} - {template_name}"
        current_roi = None
        editing_roi = None
        drag_start = None
        last_click_time = 0
        last_click_roi = None

        def handle_double_click(x, y, clicked_roi):
            nonlocal editing_roi
            if editing_roi == clicked_roi:
                editing_roi = None
                print(f"Modo de movimentação ativado para todas as ROIs")
            else:
                editing_roi = clicked_roi
                print(f"Modo de redimensionamento ativado para: {editing_roi}")

        def find_clicked_roi(x, y):
            for name, region in self.regions.items():
                x1, y1, x2, y2 = region["coords"]
                margin = 5
                if (x1-margin) <= x <= (x2+margin) and (y1-margin) <= y <= (y2+margin):
                    return name
            return None

        def mouse_callback(event, x, y, flags, param):
            nonlocal current_roi, drag_start, last_click_time, last_click_roi, editing_roi

            if event == cv2.EVENT_LBUTTONDOWN:
                clicked_roi = find_clicked_roi(x, y)
                
                current_time = cv2.getTickCount() / cv2.getTickFrequency()
                if clicked_roi == last_click_roi and (current_time - last_click_time) < 0.3:
                    handle_double_click(x, y, clicked_roi)
                    last_click_time = 0
                else:
                    last_click_roi = clicked_roi
                    last_click_time = current_time

                    if clicked_roi:
                        current_roi = clicked_roi
                        if editing_roi == clicked_roi:
                            x1, y1, x2, y2 = self.regions[clicked_roi]["coords"]
                            edge_size = 10
                            if (abs(x - x1) < edge_size and abs(y - y1) < edge_size):
                                drag_start = "topleft"
                            elif (abs(x - x2) < edge_size and abs(y - y1) < edge_size):
                                drag_start = "topright"
                            elif (abs(x - x1) < edge_size and abs(y - y2) < edge_size):
                                drag_start = "bottomleft"
                            elif (abs(x - x2) < edge_size and abs(y - y2) < edge_size):
                                drag_start = "bottomright"
                        else:
                            x1, y1, x2, y2 = self.regions[clicked_roi]["coords"]
                            drag_start = (x - x1, y - y1)

            elif event == cv2.EVENT_MOUSEMOVE and flags == cv2.EVENT_FLAG_LBUTTON:
                if current_roi and drag_start:
                    x1, y1, x2, y2 = self.regions[current_roi]["coords"]
                    
                    if editing_roi == current_roi:
                        min_size = 20
                        if isinstance(drag_start, str):
                            if drag_start == "topleft":
                                x1 = min(x, x2 - min_size)
                                y1 = min(y, y2 - min_size)
                            elif drag_start == "topright":
                                x2 = max(x, x1 + min_size)
                                y1 = min(y, y2 - min_size)
                            elif drag_start == "bottomleft":
                                x1 = min(x, x2 - min_size)
                                y2 = max(y, y1 + min_size)
                            elif drag_start == "bottomright":
                                x2 = max(x, x1 + min_size)
                                y2 = max(y, y1 + min_size)
                    else:
                        width = x2 - x1
                        height = y2 - y1
                        new_x1 = x - drag_start[0]
                        new_y1 = y - drag_start[1]
                        new_x2 = new_x1 + width
                        new_y2 = new_y1 + height

                        if new_x1 < 0:
                            new_x1 = 0
                            new_x2 = width
                        if new_y1 < 0:
                            new_y1 = 0
                            new_y2 = height
                        if new_x2 > self.target_width:
                            new_x2 = self.target_width
                            new_x1 = new_x2 - width
                        if new_y2 > self.target_height:
                            new_y2 = self.target_height
                            new_y1 = new_y2 - height

                        x1, y1, x2, y2 = new_x1, new_y1, new_x2, new_y2

                    x1 = max(0, min(x1, self.target_width))
                    y1 = max(0, min(y1, self.target_height))
                    x2 = max(0, min(x2, self.target_width))
                    y2 = max(0, min(y2, self.target_height))
                    
                    self.regions[current_roi]["coords"] = (int(x1), int(y1), int(x2), int(y2))

            elif event == cv2.EVENT_LBUTTONUP:
                current_roi = None
                drag_start = None

        def draw_regions(img):
            for name, region in self.regions.items():
                x1, y1, x2, y2 = region["coords"]
                color = region["color"]
                
                cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
                cv2.putText(img, f"{name}", (x1, y1-5), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                
                if name == editing_roi:
                    handle_size = 5
                    cv2.rectangle(img, (x1-handle_size, y1-handle_size), 
                                (x1+handle_size, y1+handle_size), color, -1)
                    cv2.rectangle(img, (x2-handle_size, y1-handle_size),
                                (x2+handle_size, y1+handle_size), color, -1)
                    cv2.rectangle(img, (x1-handle_size, y2-handle_size),
                                (x1+handle_size, y2+handle_size), color, -1)
                    cv2.rectangle(img, (x2-handle_size, y2-handle_size),
                                (x2+handle_size, y2+handle_size), color, -1)

        def add_new_roi():
            """Adiciona uma nova ROI"""
            print("\nAdicionando nova ROI")
            name = input("Nome da ROI: ").strip().upper()
            if not name:
                print("Nome inválido!")
                return
            
            if name in self.regions:
                print("ROI com este nome já existe!")
                return
                
            print("\nTipos disponíveis:")
            print("1. text")
            print("2. cpf")
            print("3. number")
            print("4. currency")
            print("5. date")
            
            type_choice = input("Escolha o tipo (1-5): ").strip()
            type_map = {
                "1": "text",
                "2": "cpf",
                "3": "number",
                "4": "currency",
                "5": "date"
            }
            
            if type_choice not in type_map:
                print("Tipo inválido!")
                return
                
            expected_type = type_map[type_choice]
            
            center_x = self.target_width // 2
            center_y = self.target_height // 2
            width = 200
            height = 30
            
            color = (
                np.random.randint(0, 255),
                np.random.randint(0, 255),
                np.random.randint(0, 255)
            )
            
            self.regions[name] = {
                "coords": (
                    center_x - width//2,
                    center_y - height//2,
                    center_x + width//2,
                    center_y + height//2
                ),
                "color": color,
                "expected_type": expected_type
            }
            
            print(f"\nROI '{name}' adicionada! Use o mouse para ajustar sua posição.")

        def save_template():
            """Salva o template atual"""
            try:
                # Salvar no gerenciador de templates
                self.template_manager.create_template(self.current_doc_type, self.current_template_name, self.regions)
                print(f"\nTemplate '{self.current_template_name}' salvo com sucesso!")
                
                # Salvar também em arquivo de texto para referência
                with open('roi_coordinates.txt', 'w') as f:
                    f.write(f"Documento: {self.current_doc_type}\n")
                    f.write(f"Template: {self.current_template_name}\n\n")
                    for name, region in self.regions.items():
                        f.write(f"{name}: {region['coords']}\n")
                print("Coordenadas salvas em 'roi_coordinates.txt'")
                
            except Exception as e:
                print(f"Erro ao salvar template: {e}")

        # Configuração da janela
        cv2.namedWindow(window_name, cv2.WINDOW_NORMAL | cv2.WINDOW_FREERATIO)
        cv2.resizeWindow(window_name, 1200, 800)
        cv2.setMouseCallback(window_name, mouse_callback)

        print("\nInstruções:")
        print("- Clique e arraste os retângulos para movê-los")
        print("- Dê um duplo clique em um retângulo para ativar o modo de redimensionamento")
        print("- No modo de redimensionamento, arraste os quadradinhos nos cantos")
        print("- Dê outro duplo clique para voltar ao modo de movimento")
        print("- Pressione 'a' para adicionar uma nova ROI")
        print("- Pressione 's' para salvar o template")
        print("- Pressione 'q' quando terminar o ajuste")

        while True:
            debug_img = image.copy()
            # Adicionar grid de referência
            grid_color = (128, 128, 128)
            for x in range(0, self.target_width, 100):
                cv2.line(debug_img, (x, 0), (x, self.target_height), grid_color, 1)
                if x % 500 == 0:
                    cv2.putText(debug_img, str(x), (x, 30), 
                            cv2.FONT_HERSHEY_SIMPLEX, 1, grid_color, 2)
            
            for y in range(0, self.target_height, 100):
                cv2.line(debug_img, (0, y), (self.target_width, y), grid_color, 1)
                if y % 500 == 0:
                    cv2.putText(debug_img, str(y), (10, y), 
                            cv2.FONT_HERSHEY_SIMPLEX, 1, grid_color, 2)

            draw_regions(debug_img)
            cv2.imshow(window_name, debug_img)

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                print("\nCoordenadas finais:")
                for name, region in self.regions.items():
                    print(f"{name}: {region['coords']}")
                break
            
            elif key == ord('s'):
                save_template()
            
            elif key == ord('a'):
                add_new_roi()

        cv2.destroyAllWindows()
        return self.regions